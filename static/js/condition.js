let allowedLayer = null;
let selectedFeature = null;
let currentVehicle = null; // Bi·∫øn l∆∞u ƒëo·∫°n ƒë∆∞·ªùng ng∆∞·ªùi d√πng ch·ªçn
let isAddingCondition = false;
let condition_cache = {}; // L∆∞u condition cho t·ª´ng edge_id ph√≠a frontend

function filterRoutesByVehicle() {
    const selectedVehicle = document.getElementById('vehicle').value;
    currentVehicle = selectedVehicle;

    fetch('/filter_routes', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ vehicle: selectedVehicle })
    })
    .then(res => res.json())
    .then(data => {
      console.log(data.message);
      updateAllowedRoutes(); // t·∫£i l·∫°i file vhc_allowed v√† hi·ªÉn th·ªã
    })
    .catch(err => console.error('L·ªói khi l·ªçc c√°c ƒëo·∫°n ƒë∆∞·ªùng:', err));
  }
  
function updateAllowedRoutes() {
    if (allowedLayer) map.removeLayer(allowedLayer);
  
    fetch('/static/geojson/vhc_allowed.geojson?ts='+Date.now())
      .then(res => res.json())
      .then(data => {
        allowedLayer = L.geoJSON(data, {
          style: {
            color: "#6EC2F7",
            weight: 3,
            opacity: 0.9
          },
          onEachFeature: onEachFeature  // G·ªçi h√†m khi nh·∫•n v√†o c√°c ƒëo·∫°n ƒë∆∞·ªùng
        }).addTo(map);
      });
  }

// H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n v√†o ƒëo·∫°n ƒë∆∞·ªùng
function onEachFeature(feature, layer) {
  layer.on('click', function (e) {
      if (!isAddingCondition) return;
      selectedFeature = feature;  // L∆∞u l·∫°i feature (ƒëo·∫°n ƒë∆∞·ªùng) ng∆∞·ªùi d√πng ch·ªçn

      // Hi·ªÉn th·ªã b·∫£ng ƒëi·ªÅu ki·ªán
    document.getElementById('conditionOptions').style.display = 'grid';
      // G√°n s·ª± ki·ªán click cho t·ª´ng √¥ condition
    document.querySelectorAll('.condition-box').forEach(box => {
      box.onclick = function () {
        const condition = this.dataset.condition;
        const edge_id = String(selectedFeature.properties.id);  // ƒê·∫£m b·∫£o edge_id l√† string

        // ‚úÖ C·∫≠p nh·∫≠t v√†o bi·∫øn to√†n c·ª•c
        condition_cache[edge_id] = condition;

        // ‚úÖ G·ª≠i v·ªÅ backend ƒë·ªÉ l∆∞u t·∫°m
        updateCondition(String(edge_id), condition);
        let color = "#00FF00";
        if (condition === "normal") color = "#00FF00"; 
        else if (condition === "jam") color = "#FF6666";
        else if (condition === "flooded") color = "#0099FF";
        else if (condition === "not allowed") color = "#FFD700";
        layer.setStyle({ color: color, weight: 5, opacity: 1 });

        document.getElementById('conditionOptions').style.display = 'none';
      };
  });
});
}

// G·ª≠i y√™u c·∫ßu t·ªõi API ƒë·ªÉ c·∫≠p nh·∫≠t ƒëi·ªÅu ki·ªán v√†o condition_cache
function updateCondition(edge_id, condition) {
    fetch('/update_condition_temp', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ edge_id: edge_id, condition: condition })
    })
    .then(res => res.json())
    .then(data => {
        console.log(data.message);
    })
    .catch(err => console.error('L·ªói khi c·∫≠p nh·∫≠t ƒëi·ªÅu ki·ªán:', err));
}

// B·∫Øt s·ª± ki·ªán khi ng∆∞·ªùi d√πng click v√†o c√°c condition-box
document.addEventListener("DOMContentLoaded", function () {
    document.querySelectorAll('.condition-box').forEach(box => {
        box.addEventListener('click', function () {
            const condition = box.dataset.condition;

            if (selectedFeature) {
                const edge_id = selectedFeature.properties.id;
                condition_cache[edge_id] = condition;
                updateCondition(edge_id, condition);
                console.log(`ƒê√£ ch·ªçn ƒëi·ªÅu ki·ªán '${condition}' cho ƒëo·∫°n ${edge_id}`);
            } else {
                alert("B·∫°n c·∫ßn nh·∫•n v√†o ƒëo·∫°n ƒë∆∞·ªùng tr∆∞·ªõc khi ch·ªçn ƒëi·ªÅu ki·ªán.");
            }
        });
    });
});

document.addEventListener("DOMContentLoaded", function () {
    const selected = document.getElementById("vehicle").value;
    currentVehicle = selected;
    filterRoutesByVehicle();  // g·ªçi l·∫ßn ƒë·∫ßu khi m·ªü trang
    // üîÅ G·ªçi l·∫°i khi ng∆∞·ªùi d√πng ƒë·ªïi ph∆∞∆°ng ti·ªán
    document.getElementById('vehicle').addEventListener('change', () => {
      filterRoutesByVehicle();
      setTimeout(() => {
        finalizeCondition();
      }, 500);
    });
  });
  console.log("ƒêang l·ªçc cho vehicle:", currentVehicle);

function addCondition() {
    console.log("H√†m addCondition ƒë∆∞·ª£c g·ªçi");
    isAddingCondition = !isAddingCondition;
    
    if (isAddingCondition) {
      console.log("Ch·∫ø ƒë·ªô th√™m ƒëi·ªÅu ki·ªán ƒë√£ b·∫≠t");
      alert("Nh·∫•n v√†o ƒëo·∫°n ƒë∆∞·ªùng ƒë·ªÉ th√™m ƒëi·ªÅu ki·ªán.");
      document.getElementById('addCondition').innerText = "T·∫Øt th√™m ƒëi·ªÅu ki·ªán";
    } else {
      console.log("Ch·∫ø ƒë·ªô th√™m ƒëi·ªÅu ki·ªán ƒë√£ t·∫Øt");
      alert("Ch·∫ø ƒë·ªô th√™m ƒëi·ªÅu ki·ªán ƒë√£ t·∫Øt.");
      document.getElementById('addCondition').innerText = "Th√™m ƒëi·ªÅu ki·ªán";
  
      finalizeCondition();
    }
}

function finalizeCondition(){
  // L·∫•y ph∆∞∆°ng ti·ªán ƒë√£ ch·ªçn v√† ƒëi·ªÅu ki·ªán ƒë√£ thay ƒë·ªïi
  const vehicle = document.getElementById('vehicle').value;
  fetch('/finalize_conditions', {
      method: 'POST',
      headers: {
          'Content-Type': 'application/json'
      },
      body: JSON.stringify({
          vehicle: vehicle,
          conditions: condition_cache  // G·ª≠i to√†n b·ªô ƒëi·ªÅu ki·ªán ƒë√£ thay ƒë·ªïi
      })
  })
  .then(response => response.json())
  .then(data => {
      console.log(data.message);  // In th√¥ng b√°o t·ª´ server
      const totalTravelTime = data.total_travel_time;
      const totalLength = data.total_length;
      displayResults(totalTravelTime, totalLength);
  })
  .catch(error => {
      console.error('L·ªói khi g·ªçi finalize_conditions:', error);
  });
}

function displayResults(total_travel_time, total_length) {
  const timeElem = document.getElementById('total_travel_time');
  const lengthElem = document.getElementById('total_length');

  if (timeElem) timeElem.textContent = `T·ªïng th·ªùi gian di chuy·ªÉn: ${total_travel_time} gi·ªù`;
  if (lengthElem) lengthElem.textContent = `T·ªïng chi·ªÅu d√†i qu√£ng ƒë∆∞·ªùng: ${total_length} m√©t`;
}
