let allowedLayer = null;
let selectedFeature = null; // Bi·∫øn l∆∞u ƒëo·∫°n ƒë∆∞·ªùng ng∆∞·ªùi d√πng ch·ªçn
let isAddingCondition = false;
let condition_cache = {}; // d√πng ·ªü JS

function filterRoutesByVehicle() {
    const selectedVehicle = document.getElementById('vehicle').value;
    currentVehicle = selectedVehicle;

    fetch('/filter_routes', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ vehicle: selectedVehicle })
    })
    .then(res => res.json())
    .then(data => {
      console.log(data.message);
      updateAllowedRoutes(); // t·∫£i l·∫°i file vhc_allowed v√† hi·ªÉn th·ªã
    })
    .catch(err => console.error('L·ªói khi l·ªçc c√°c ƒëo·∫°n ƒë∆∞·ªùng:', err));
  }
  
function updateAllowedRoutes() {
    if (allowedLayer) map.removeLayer(allowedLayer);
  
    fetch('/static/geojson/vhc_allowed.geojson?ts='+Date.now())
      .then(res => res.json())
      .then(data => {
        allowedLayer = L.geoJSON(data, {
          style: {
            color: "green",
            weight: 3,
            opacity: 0.9
          },
          onEachFeature: onEachFeature  // G·ªçi h√†m khi nh·∫•n v√†o c√°c ƒëo·∫°n ƒë∆∞·ªùng
        }).addTo(map);
      });
  }
  
// H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n v√†o ƒëo·∫°n ƒë∆∞·ªùng
function onEachFeature(feature, layer) {
    layer.on('click', function (e) {
        if (!isAddingCondition) return;
        selectedFeature = feature;  // L∆∞u l·∫°i feature (ƒëo·∫°n ƒë∆∞·ªùng) ng∆∞·ªùi d√πng ch·ªçn

        // Hi·ªÉn th·ªã dropdown
        let dropdown = document.getElementById('Condition');
        dropdown.style.display = 'block';  // Hi·ªÉn th·ªã dropdown

        // ƒê·∫∑t dropdown ·ªü v·ªã tr√≠ g·∫ßn n∆°i ng∆∞·ªùi d√πng nh·∫•n tr√™n b·∫£n ƒë·ªì
        dropdown.style.position = 'absolute';
        dropdown.style.top = `${e.latlng.lat}px`;
        dropdown.style.left = `${e.latlng.lng}px`;

        // C·∫≠p nh·∫≠t condition v√†o condition_cache khi ng∆∞·ªùi d√πng ch·ªçn ƒëi·ªÅu ki·ªán
        dropdown.onchange = function () {
            let condition = dropdown.value;
            condition_cache[selectedFeature.properties.id] = condition;
            updateCondition(selectedFeature.properties.id, condition);

            // dropdown.style.display = 'none';

            // // Reset l·∫°i ch·∫ø ƒë·ªô
            // isAddingCondition = false;
        };
    });
}

// G·ª≠i y√™u c·∫ßu t·ªõi API ƒë·ªÉ c·∫≠p nh·∫≠t ƒëi·ªÅu ki·ªán v√†o condition_cache
function updateCondition(edge_id, condition) {
    fetch('/update_condition_temp', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ edge_id: edge_id, condition: condition })
    })
    .then(res => res.json())
    .then(data => {
        console.log(data.message);
    })
    .catch(err => console.error('L·ªói khi c·∫≠p nh·∫≠t ƒëi·ªÅu ki·ªán:', err));
}

document.addEventListener("DOMContentLoaded", function () {
    const selected = document.getElementById("vehicle").value;
    currentVehicle = selected;
    filterRoutesByVehicle();  // g·ªçi l·∫ßn ƒë·∫ßu khi m·ªü trang
    // üîÅ G·ªçi l·∫°i khi ng∆∞·ªùi d√πng ƒë·ªïi ph∆∞∆°ng ti·ªán
    document.getElementById('vehicle').addEventListener('change', filterRoutesByVehicle);
  });
  console.log("ƒêang l·ªçc cho vehicle:", currentVehicle);

function addCondition() {
    console.log("H√†m addCondition ƒë∆∞·ª£c g·ªçi");
    isAddingCondition = !isAddingCondition;
    
    if (isAddingCondition) {
      console.log("Ch·∫ø ƒë·ªô th√™m ƒëi·ªÅu ki·ªán ƒë√£ b·∫≠t");
      alert("Nh·∫•n v√†o ƒëo·∫°n ƒë∆∞·ªùng ƒë·ªÉ th√™m ƒëi·ªÅu ki·ªán.");
      document.getElementById('addCondition').innerText = "T·∫Øt th√™m ƒëi·ªÅu ki·ªán";
    } else {
      console.log("Ch·∫ø ƒë·ªô th√™m ƒëi·ªÅu ki·ªán ƒë√£ t·∫Øt");
      alert("Ch·∫ø ƒë·ªô th√™m ƒëi·ªÅu ki·ªán ƒë√£ t·∫Øt. B·∫°n c√≥ th·ªÉ ch·ªçn ƒëi·ªÉm xu·∫•t ph√°t v√† ƒëi·ªÉm ƒë·∫øn.");
      document.getElementById('addCondition').innerText = "Th√™m ƒëi·ªÅu ki·ªán";
  
      finalizeCondition();
    }
}

function finalizeCondition(){
  // L·∫•y ph∆∞∆°ng ti·ªán ƒë√£ ch·ªçn v√† ƒëi·ªÅu ki·ªán ƒë√£ thay ƒë·ªïi
  const vehicle = document.getElementById('vehicle').value;
  fetch('/finalize_conditions', {
      method: 'POST',
      headers: {
          'Content-Type': 'application/json'
      },
      body: JSON.stringify({
          vehicle: vehicle,
          conditions: condition_cache  // G·ª≠i to√†n b·ªô ƒëi·ªÅu ki·ªán ƒë√£ thay ƒë·ªïi
      })
  })
  .then(response => response.json())
  .then(data => {
      console.log(data.message);  // In th√¥ng b√°o t·ª´ server
  })
  .catch(error => {
      console.error('L·ªói khi g·ªçi finalize_conditions:', error);
  });
}